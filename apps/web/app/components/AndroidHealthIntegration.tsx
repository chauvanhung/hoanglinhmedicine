'use client';

import { useState, useEffect } from 'react';
import { Smartphone, Activity, Zap, Heart, Scale } from 'lucide-react';
import { androidHealthService, AndroidHealthData } from '../../lib/androidHealthService';

interface AndroidHealthIntegrationProps {
  onDataSync?: (data: AndroidHealthData) => void;
}

export default function AndroidHealthIntegration({ onDataSync }: AndroidHealthIntegrationProps) {
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [healthData, setHealthData] = useState<AndroidHealthData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [deviceInfo, setDeviceInfo] = useState<any>(null);

  useEffect(() => {
    // Get device info
    const info = androidHealthService.getDeviceInfo();
    setDeviceInfo(info);
  }, []);

  const connectToAndroidHealth = async () => {
    if (!androidHealthService.isAndroidDevice()) {
      setError('Android Health Connect ch·ªâ kh·∫£ d·ª•ng tr√™n thi·∫øt b·ªã Android');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const connected = await androidHealthService.connect();
      
      if (connected) {
        setIsConnected(true);
        
        // Fetch initial data
        const data = await androidHealthService.fetchHealthData();
        setHealthData(data);
        onDataSync?.(data);
      } else {
        setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Android Health Connect');
      }
      
    } catch (err) {
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Android Health Connect. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  const syncHealthData = async () => {
    if (!isConnected) return;
    
    setIsLoading(true);
    try {
      const data = await androidHealthService.syncData();
      setHealthData(data);
      onDataSync?.(data);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsLoading(false);
    }
  };

  const disconnect = () => {
    androidHealthService.disconnect();
    setIsConnected(false);
    setHealthData(null);
    setError(null);
  };

  const openHealthConnect = () => {
    // M·ªü Android Health Connect app
    const healthConnectUrl = 'content://com.google.android.apps.healthdata/healthconnect';
    window.open(healthConnectUrl, '_blank');
  };

  return (
    <div className="android-health-integration">
      <div className="health-header">
        <div className="health-icon">
          <Smartphone className="w-8 h-8 text-green-500" />
        </div>
        <div className="health-title">
          <h3>Android Health Connect</h3>
          <p>ƒê·ªìng b·ªô d·ªØ li·ªáu s·ª©c kh·ªèe t·ª´ Android Health Connect</p>
        </div>
      </div>

      {/* Device Info */}
      {deviceInfo && (
        <div className="device-info">
          <p><strong>Platform:</strong> {deviceInfo.platform}</p>
          <p><strong>Android Device:</strong> {deviceInfo.isAndroid ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}</p>
        </div>
      )}

      {!androidHealthService.isAndroidDevice() && (
        <div className="device-warning">
          <p>‚ö†Ô∏è Android Health Connect ch·ªâ kh·∫£ d·ª•ng tr√™n thi·∫øt b·ªã Android</p>
        </div>
      )}

      {error && (
        <div className="error-message">
          <p>{error}</p>
        </div>
      )}

      <div className="health-actions">
        {!isConnected ? (
          <div className="connection-buttons">
            <button
              onClick={connectToAndroidHealth}
              disabled={!androidHealthService.isAndroidDevice() || isLoading}
              className="connect-button"
            >
              {isLoading ? (
                <div className="loading-spinner" />
              ) : (
                <>
                  <Smartphone className="w-5 h-5" />
                  K·∫øt n·ªëi Android Health
                </>
              )}
            </button>
            
            {androidHealthService.isAndroidDevice() && (
              <button
                onClick={openHealthConnect}
                className="open-health-connect-button"
              >
                M·ªü Health Connect App
              </button>
            )}
          </div>
        ) : (
          <div className="connected-state">
            <div className="connection-status">
              <div className="status-indicator connected" />
              <span>ƒê√£ k·∫øt n·ªëi v·ªõi Android Health</span>
            </div>
            <div className="action-buttons">
              <button
                onClick={syncHealthData}
                disabled={isLoading}
                className="sync-button"
              >
                {isLoading ? (
                  <div className="loading-spinner" />
                ) : (
                  <>
                    <Zap className="w-4 h-4" />
                    ƒê·ªìng b·ªô
                  </>
                )}
              </button>
              <button
                onClick={disconnect}
                className="disconnect-button"
              >
                Ng·∫Øt k·∫øt n·ªëi
              </button>
            </div>
          </div>
        )}
      </div>

      {healthData && (
        <div className="health-data">
          <h4>D·ªØ li·ªáu s·ª©c kh·ªèe t·ª´ Android</h4>
          <div className="data-grid">
            <div className="data-item">
              <Activity className="w-6 h-6 text-blue-500" />
              <div className="data-content">
                <span className="data-value">{healthData.steps.toLocaleString()}</span>
                <span className="data-label">B∆∞·ªõc ch√¢n</span>
              </div>
            </div>
            <div className="data-item">
              <Zap className="w-6 h-6 text-orange-500" />
              <div className="data-content">
                <span className="data-value">{healthData.calories}</span>
                <span className="data-label">Calories</span>
              </div>
            </div>
            <div className="data-item">
              <Heart className="w-6 h-6 text-red-500" />
              <div className="data-content">
                <span className="data-value">{healthData.heartRate}</span>
                <span className="data-label">Nh·ªãp tim (bpm)</span>
              </div>
            </div>
            <div className="data-item">
              <Scale className="w-6 h-6 text-green-500" />
              <div className="data-content">
                <span className="data-value">{healthData.weight.toFixed(1)}kg</span>
                <span className="data-label">C√¢n n·∫∑ng</span>
              </div>
            </div>
          </div>
          <div className="last-sync">
            <p>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {new Date(healthData.lastSync).toLocaleString('vi-VN')}</p>
          </div>
        </div>
      )}

      {/* Android Health Connect Info */}
      <div className="health-connect-info">
        <h4>V·ªÅ Android Health Connect</h4>
        <div className="info-grid">
          <div className="info-item">
            <h5>üîí B·∫£o m·∫≠t</h5>
            <p>D·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a v√† ch·ªâ b·∫°n m·ªõi c√≥ quy·ªÅn truy c·∫≠p</p>
          </div>
          <div className="info-item">
            <h5>üì± T√≠ch h·ª£p</h5>
            <p>K·∫øt n·ªëi v·ªõi t·∫•t c·∫£ ·ª©ng d·ª•ng s·ª©c kh·ªèe tr√™n Android</p>
          </div>
          <div className="info-item">
            <h5>üîÑ ƒê·ªìng b·ªô</h5>
            <p>D·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªìng b·ªô t·ª± ƒë·ªông v√† real-time</p>
          </div>
          <div className="info-item">
            <h5>üìä Ph√¢n t√≠ch</h5>
            <p>Xem xu h∆∞·ªõng s·ª©c kh·ªèe v√† ƒë∆∞a ra khuy·∫øn ngh·ªã</p>
          </div>
        </div>
      </div>
    </div>
  );
}
